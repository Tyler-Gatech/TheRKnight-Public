price_under_total = price_under,
score_home = as.numeric(score_home_fill),
score_away = as.numeric(score_away_fill),
min_rem = min_rem_fill,
period = half_fill,
time_stamp = rep(cur_time, length(teams_home)),
iteration = rep(iter, length(teams_home))
)
df
#check for last iteration and only keep changes
#Pull from current gooogle sheet
cur_odds <- read_sheet("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day)
last_odds <- cur_odds %>%
group_by(home_team, away_team) %>%
mutate(max_iter = max(iteration)) %>%
ungroup() %>%
filter(iteration == max_iter) %>%
select(-max_iter)
#count # of rows in each file
last_rows <- nrow(last_odds)
df_rows <- nrow(df)
#add row ids for observational purposes
last_row_id <- seq(1:last_rows)
df_row_id <- seq((last_rows+1),(last_rows + df_rows))
#update files with row ids and table names
last_odds <- last_odds %>%
mutate(row_id = last_row_id,
table = rep("last", length(last_rows)))
df <- df %>%
mutate(row_id = df_row_id,
table = rep("df", length(df_rows)))
#union the files with the last_file on top
union_file <- last_odds %>%
union_all(df)
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
df <- df %>%
select(-row_id, -`table`)
#write to local rds
str_time <- as.character(cur_time) %>%
str_replace_all( c("-" = "_", " " = "_", ":" = "_", "\\+" = ""))
#full odds
df %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\full\\", "df_nba_odds_rem_full", str_time, ".rds"))
#new odds only - i.e. additional
df_rem %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\rem\\", "df_nba_odds_rem_add", str_time, ".rds"))
#connect to google sheetes
#ORIGINAL SHEET
# ss <- gs4_create(
# #   "ncaa_odds",
# #   sheets = paste0(run_day)
# # )
#sheet_write(df,"1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day )
# append sheets
sheet_append("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s",df_rem, sheet= run_day )
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
%>%
#union the files with the last_file on top
union_file <- last_odds %>%
union_all(df)
union_file
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
home_spread, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
union_file
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread_home, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
df <- df %>%
select(-row_id, -`table`)
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
df_rem
df
last_odds
df_row_id <- seq((last_rows+1),(last_rows + df_rows))
#pulling odds from fandeul sportsbook for first round of bball tournament
#install.packages("googlesheets4")
#install.packages("devtools")
#library(devtools)
rm(list = ls())
library(googlesheets4)
#For date manipulation
library(lubridate)
#For data manipulation
library(tidyverse)
#For grabbing the html code
library(rvest)
#for browser bot navigation
library(RSelenium)
#this package does not nativelyi load if using command line
library(methods)
library(stringr)
#subtracting 5 hours to ensure games after midnight ET are included on same day
run_day <- str_replace_all(as.character(substr(Sys.time() - (5*60*60),1,10), format = "%Y%M%D"),"-","_")
#run_day = "2021_03_29"
iter_prev <- read_rds("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba_iter.rds")
iter <- iter_prev + 1 #for subsequent runs
#overwrite iter
#iter = 0
write_rds(iter, "C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba_iter.rds")
#connecting to docker port
remDr <- remoteDriver(
port = 4445L
)
cur_time <- Sys.time()
#Create a 1 minute pause for this to run
remDr$open()
Sys.sleep(runif(1,20,25))
#URl
url <- "https://sportsbook.fanduel.com/sports/navigation/830.1/10107.3"
#Create a 1.5 minute pause for this to run
remDr$navigate(url)
Sys.sleep(runif(1,25,35))
#Create a 1 minute pause fo rthis to run
doc_cur <- read_html(remDr$getPageSource()[[1]])
Sys.sleep(runif(1,25,35))
remDr$close()
print(Sys.time()-cur_time)
handicaps <- doc_cur %>%
html_nodes("div.currenthandicap") %>%
html_text()
prices <- doc_cur %>%
html_nodes("div.selectionprice") %>%
html_text()
teams <- doc_cur %>%
html_nodes("span.name") %>%
html_text()
scores <- doc_cur %>%
html_nodes("td.score-value") %>%
html_text()
half <- doc_cur %>%
html_nodes("span.live-time") %>%
html_text()
time <- doc_cur %>%
html_nodes("span.match-time") %>%
html_text()
#data clean up '
#some O/U are not listed in handicaps. so you need to grab each game separately
total_locs <- which(grepl("U", handicaps))
spread_locs <-  which(grepl("\\+|\\-", handicaps))
spread_locs2 <- spread_locs[c(F,F,F,T)]
#missing totals
total_locs_exist <- (spread_locs2+2) %in% total_locs
#handicaps
hlist <- handicaps %>%
str_replace_all( c(" " = "", "O" = "", "U" = "", "\\+" = "")) %>%
as.numeric()
#Grab every 1st and 5th element out of 6. The othhers are just repeats
# hlist2 <- hlist[c(T, F, F, F, T, F)]
# spread <- hlist2[c(T,F)]
# total <- hlist2[c(F,T)]
#blank totals
totals <- rep(NA, length = length(spread_locs2))
#loop through and when true , populate to fill in totals
i = 0
for(val in 1:length(totals)){
if(total_locs_exist[val]){ #i.e if there is a total for the game
i = i +1 #iterate to the next total value
totals[val] = hlist[total_locs[i]] #populate with that total value
} #otherwise we ignore
}
#for true totals as in totals
spread <- hlist[spread_locs2] #to get the home spread * -1
#prices #note there are some NA prices if no betting is aviailable
p_list <- prices %>%
str_replace_all( c(" " = "", "O" = "", "U" = "", "\\+" = "")) %>%
as.numeric()
price_away <- p_list[c(T, F, F, F, F, F)]
price_home <- p_list[c(F, T, F, F, F, F)]
price_a_ml <- p_list[c(F, F, T, F, F, F)]
price_h_ml <- p_list[c(F, F, F, T, F, F)]
price_over <- p_list[c(F, F, F, F, T, F)]
price_under <- p_list[c(F, F, F, F, F, T)]
fave_list <- price_a_ml <= price_h_ml #check to see if away team is favorite
#if NA i'll just go with away
away_fave <- fave_list %>%
replace_na(TRUE)
#teams
#teams[-1] removes title
teams_away <- teams[-1][c(T,F)]
teams_home <- teams[-1][c(F,T)]
#scores
score_away <- scores[c(T,F)]
score_home <- scores[c(F,T)]
#min remaining
half_num <- str_extract(half, "[0-9]") %>%
as.numeric()
min_num <- str_extract(time, "[0-9]{1,2}") %>%
as.numeric()
min_rem <- (4-half_num)*12 + min_num
min_rem_fill = c(min_rem, rep(NA,length(teams_home) - length(min_rem)))
half_fill = c(half_num, rep(NA,length(teams_home) - length(half_num)))
#adding 0 where game hasn't started
score_home_fill = c(score_home, rep(NA,length(teams_home) - length(score_home)))
#adding 0 where game hasn't started
score_away_fill = c(score_away, rep(NA,length(teams_home) - length(score_home)))
df <- tibble(
home_team = teams_home,
away_team = teams_away,
away_team_favorite = away_fave,
spread_home = spread,
total = totals,
price_home = price_home,
price_away = price_away,
price_home_ml = price_h_ml,
price_away_ml = price_a_ml,
price_over_total = price_over,
price_under_total = price_under,
score_home = as.numeric(score_home_fill),
score_away = as.numeric(score_away_fill),
min_rem = min_rem_fill,
period = half_fill,
time_stamp = rep(cur_time, length(teams_home)),
iteration = rep(iter, length(teams_home))
)
df
#check for last iteration and only keep changes
#Pull from current gooogle sheet
cur_odds <- read_sheet("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day)
last_odds <- cur_odds %>%
group_by(home_team, away_team) %>%
mutate(max_iter = max(iteration)) %>%
ungroup() %>%
filter(iteration == max_iter) %>%
select(-max_iter)
#count # of rows in each file
last_rows <- nrow(last_odds)
df_rows <- nrow(df)
#add row ids for observational purposes
last_row_id <- seq(1:last_rows)
df_row_id <- seq((last_rows+1),(last_rows + df_rows))
#update files with row ids and table names
last_odds <- last_odds %>%
mutate(row_id = last_row_id,
table = rep("last", length(last_rows)))
df <- df %>%
mutate(row_id = df_row_id,
table = rep("df", length(df_rows)))
#union the files with the last_file on top
union_file <- last_odds %>%
union_all(df)
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread_home, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
df <- df %>%
select(-row_id, -`table`)
#write to local rds
str_time <- as.character(cur_time) %>%
str_replace_all( c("-" = "_", " " = "_", ":" = "_", "\\+" = ""))
#full odds
df %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\full\\", "df_nba_odds_rem_full", str_time, ".rds"))
#new odds only - i.e. additional
df_rem %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\rem\\", "df_nba_odds_rem_add", str_time, ".rds"))
#connect to google sheetes
#ORIGINAL SHEET
# ss <- gs4_create(
# #   "ncaa_odds",
# #   sheets = paste0(run_day)
# # )
#sheet_write(df,"1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day )
# append sheets
sheet_append("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s",df_rem, sheet= run_day )
#pulling odds from fandeul sportsbook for first round of bball tournament
#install.packages("googlesheets4")
#install.packages("devtools")
#library(devtools)
rm(list = ls())
library(googlesheets4)
#For date manipulation
library(lubridate)
#For data manipulation
library(tidyverse)
#For grabbing the html code
library(rvest)
#for browser bot navigation
library(RSelenium)
#this package does not nativelyi load if using command line
library(methods)
library(stringr)
#subtracting 5 hours to ensure games after midnight ET are included on same day
run_day <- str_replace_all(as.character(substr(Sys.time() - (5*60*60),1,10), format = "%Y%M%D"),"-","_")
#run_day = "2021_03_29"
iter_prev <- read_rds("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba_iter.rds")
iter <- iter_prev + 1 #for subsequent runs
#overwrite iter
#iter = 0
write_rds(iter, "C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba_iter.rds")
#connecting to docker port
remDr <- remoteDriver(
port = 4445L
)
cur_time <- Sys.time()
#Create a 1 minute pause for this to run
remDr$open()
Sys.sleep(runif(1,20,25))
#URl
url <- "https://sportsbook.fanduel.com/sports/navigation/830.1/10107.3"
#Create a 1.5 minute pause for this to run
remDr$navigate(url)
Sys.sleep(runif(1,25,35))
#Create a 1 minute pause fo rthis to run
doc_cur <- read_html(remDr$getPageSource()[[1]])
Sys.sleep(runif(1,25,35))
remDr$close()
print(Sys.time()-cur_time)
handicaps <- doc_cur %>%
html_nodes("div.currenthandicap") %>%
html_text()
prices <- doc_cur %>%
html_nodes("div.selectionprice") %>%
html_text()
teams <- doc_cur %>%
html_nodes("span.name") %>%
html_text()
scores <- doc_cur %>%
html_nodes("td.score-value") %>%
html_text()
half <- doc_cur %>%
html_nodes("span.live-time") %>%
html_text()
time <- doc_cur %>%
html_nodes("span.match-time") %>%
html_text()
#data clean up '
#some O/U are not listed in handicaps. so you need to grab each game separately
total_locs <- which(grepl("U", handicaps))
spread_locs <-  which(grepl("\\+|\\-", handicaps))
spread_locs2 <- spread_locs[c(F,F,F,T)]
#missing totals
total_locs_exist <- (spread_locs2+2) %in% total_locs
#handicaps
hlist <- handicaps %>%
str_replace_all( c(" " = "", "O" = "", "U" = "", "\\+" = "")) %>%
as.numeric()
#Grab every 1st and 5th element out of 6. The othhers are just repeats
# hlist2 <- hlist[c(T, F, F, F, T, F)]
# spread <- hlist2[c(T,F)]
# total <- hlist2[c(F,T)]
#blank totals
totals <- rep(NA, length = length(spread_locs2))
#loop through and when true , populate to fill in totals
i = 0
for(val in 1:length(totals)){
if(total_locs_exist[val]){ #i.e if there is a total for the game
i = i +1 #iterate to the next total value
totals[val] = hlist[total_locs[i]] #populate with that total value
} #otherwise we ignore
}
#for true totals as in totals
spread <- hlist[spread_locs2] #to get the home spread * -1
#prices #note there are some NA prices if no betting is aviailable
p_list <- prices %>%
str_replace_all( c(" " = "", "O" = "", "U" = "", "\\+" = "")) %>%
as.numeric()
price_away <- p_list[c(T, F, F, F, F, F)]
price_home <- p_list[c(F, T, F, F, F, F)]
price_a_ml <- p_list[c(F, F, T, F, F, F)]
price_h_ml <- p_list[c(F, F, F, T, F, F)]
price_over <- p_list[c(F, F, F, F, T, F)]
price_under <- p_list[c(F, F, F, F, F, T)]
fave_list <- price_a_ml <= price_h_ml #check to see if away team is favorite
#if NA i'll just go with away
away_fave <- fave_list %>%
replace_na(TRUE)
#teams
#teams[-1] removes title
teams_away <- teams[-1][c(T,F)]
teams_home <- teams[-1][c(F,T)]
#scores
score_away <- scores[c(T,F)]
score_home <- scores[c(F,T)]
#min remaining
half_num <- str_extract(half, "[0-9]") %>%
as.numeric()
min_num <- str_extract(time, "[0-9]{1,2}") %>%
as.numeric()
min_rem <- (4-half_num)*12 + min_num
min_rem_fill = c(min_rem, rep(NA,length(teams_home) - length(min_rem)))
half_fill = c(half_num, rep(NA,length(teams_home) - length(half_num)))
#adding 0 where game hasn't started
score_home_fill = c(score_home, rep(NA,length(teams_home) - length(score_home)))
#adding 0 where game hasn't started
score_away_fill = c(score_away, rep(NA,length(teams_home) - length(score_home)))
df <- tibble(
home_team = teams_home,
away_team = teams_away,
#  away_team_favorite = away_fave,
spread_home = spread,
total = totals,
price_home = price_home,
price_away = price_away,
price_home_ml = price_h_ml,
price_away_ml = price_a_ml,
price_over_total = price_over,
price_under_total = price_under,
score_home = as.numeric(score_home_fill),
score_away = as.numeric(score_away_fill),
min_rem = min_rem_fill,
period = half_fill,
time_stamp = rep(cur_time, length(teams_home)),
iteration = rep(iter, length(teams_home))
)
df <- df %>%
mutate(away_team_favorite = if_else(spread_home>=0,TRUE,FALSE))
#check for last iteration and only keep changes
#Pull from current gooogle sheet
cur_odds <- read_sheet("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day)
last_odds <- cur_odds %>%
group_by(home_team, away_team) %>%
mutate(max_iter = max(iteration)) %>%
ungroup() %>%
filter(iteration == max_iter) %>%
select(-max_iter)
#count # of rows in each file
last_rows <- nrow(last_odds)
df_rows <- nrow(df)
#add row ids for observational purposes
last_row_id <- seq(1:last_rows)
df_row_id <- seq((last_rows+1),(last_rows + df_rows))
#update files with row ids and table names
last_odds <- last_odds %>%
mutate(row_id = last_row_id,
table = rep("last", length(last_rows)))
df <- df %>%
mutate(row_id = df_row_id,
table = rep("df", length(df_rows)))
#union the files with the last_file on top
union_file <- last_odds %>%
union_all(df)
#keep only distinct rows based on odds and scores
union_distinct <- union_file %>%
distinct(home_team, away_team, away_team_favorite,
spread_home, total, price_home, price_away,
price_home_ml, price_away_ml, price_over_total,
price_under_total, score_home, score_away, min_rem,
.keep_all = T)
#keep the remaining rows from df
df_rem <- union_distinct %>%
filter(table =="df") %>%
select(-row_id, -table)
df <- df %>%
select(-row_id, -`table`)
#write to local rds
str_time <- as.character(cur_time) %>%
str_replace_all( c("-" = "_", " " = "_", ":" = "_", "\\+" = ""))
#full odds
df %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\full\\", "df_nba_odds_rem_full", str_time, ".rds"))
#new odds only - i.e. additional
df_rem %>%
write_rds(paste0("C:\\Users\\Tyler\\Documents\\R\\fanduel_odds\\nba\\rem\\", "df_nba_odds_rem_add", str_time, ".rds"))
#connect to google sheetes
#ORIGINAL SHEET
# ss <- gs4_create(
# #   "ncaa_odds",
# #   sheets = paste0(run_day)
# # )
#sheet_write(df,"1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s", sheet= run_day )
# append sheets
sheet_append("1eKEizMxLrWB1xmOBAsb2KqYh7LACPWDpKrDY-AUCJ-s",df_rem, sheet= run_day )
